// @generated
/// Implement `DataProvider<PercentEssentialsV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 223B for the lookup data structure (47 data identifiers)
/// * 196B[^1] for the actual data (7 unique structs)
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_percent_essentials_v1_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.70"]
        impl $provider {
            const DATA_PERCENT_ESSENTIALS_V1_MARKER: icu_provider_baked::zerotrie::Data<icu::experimental::dimension::provider::percent::PercentEssentialsV1Marker> = icu_provider_baked::zerotrie::Data { trie: icu_provider_baked::zerotrie::ZeroTrieSimpleAscii { store: b"\xD2abcdefghklmnoqrstu\n\x14\x1D0R_ahjpry{}\x86\x8F\x98r\x80-S\xC2AO\x01\x81\x81\xC3elr\x01\x03\x82o\x83\x82\xC3asv\x01\x02\x82\x82\x82\xC3aes\x01\x0B\x82\x82-\xC2CL\x02H\x84I\x84b\x82\xC3nsu\x15\x1B-\xC4ADFS\x02\x08\nT\x82\xC2EK\x01\x82\x82I\x82E\x82\x82-419\x84\x83\xC3ior\x01\x02\x82\x82\x82-CH\x84l\x82\xC2rs\x01\x82b\x82u\x85\xC2bt\x01\x82\x82k\x82\xC2do\x02s\x82\x82c\x86u\x82\xC3mou\x01\x02\x82\x82\x82\xC3klv\x01\x02\x82\x82\x82\xC3krt\x01\x02\x82\x85\x82nd\x84" }, values: &[icu::experimental::dimension::provider::percent::PercentEssentialsV1 { pattern: icu_pattern::Pattern::<icu_pattern::SinglePlaceholder, _>::from_store_unchecked(alloc::borrow::Cow::Borrowed("\u{1}\u{200e}%\u{200e}")) }, icu::experimental::dimension::provider::percent::PercentEssentialsV1 { pattern: icu_pattern::Pattern::<icu_pattern::SinglePlaceholder, _>::from_store_unchecked(alloc::borrow::Cow::Borrowed("\u{1}Ùª")) }, icu::experimental::dimension::provider::percent::PercentEssentialsV1 { pattern: icu_pattern::Pattern::<icu_pattern::SinglePlaceholder, _>::from_store_unchecked(alloc::borrow::Cow::Borrowed("\u{1}\u{a0}%")) }, icu::experimental::dimension::provider::percent::PercentEssentialsV1 { pattern: icu_pattern::Pattern::<icu_pattern::SinglePlaceholder, _>::from_store_unchecked(alloc::borrow::Cow::Borrowed("\u{4}%\u{a0}")) }, icu::experimental::dimension::provider::percent::PercentEssentialsV1 { pattern: icu_pattern::Pattern::<icu_pattern::SinglePlaceholder, _>::from_store_unchecked(alloc::borrow::Cow::Borrowed("\u{1}%")) }, icu::experimental::dimension::provider::percent::PercentEssentialsV1 { pattern: icu_pattern::Pattern::<icu_pattern::SinglePlaceholder, _>::from_store_unchecked(alloc::borrow::Cow::Borrowed("\u{2}%")) }, icu::experimental::dimension::provider::percent::PercentEssentialsV1 { pattern: icu_pattern::Pattern::<icu_pattern::SinglePlaceholder, _>::from_store_unchecked(alloc::borrow::Cow::Borrowed("\u{1}\u{202f}%")) }] };
        }
        #[clippy::msrv = "1.70"]
        impl icu_provider::DataProvider<icu::experimental::dimension::provider::percent::PercentEssentialsV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::experimental::dimension::provider::percent::PercentEssentialsV1Marker>, icu_provider::DataError> {
                let mut metadata = icu_provider::DataResponseMetadata::default();
                let payload = if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_PERCENT_ESSENTIALS_V1_MARKER, req.id, req.metadata.attributes_prefix_match) {
                    payload
                } else {
                    const FALLBACKER: icu::locale::fallback::LocaleFallbackerWithConfig<'static> = icu::locale::fallback::LocaleFallbacker::new().for_config(<icu::experimental::dimension::provider::percent::PercentEssentialsV1Marker as icu_provider::DataMarker>::INFO.fallback_config);
                    let mut fallback_iterator = FALLBACKER.fallback_for(req.id.locale.clone());
                    loop {
                        if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_PERCENT_ESSENTIALS_V1_MARKER, icu_provider::DataIdentifierBorrowed::for_marker_attributes_and_locale(req.id.marker_attributes, fallback_iterator.get()), req.metadata.attributes_prefix_match) {
                            metadata.locale = Some(fallback_iterator.take());
                            break payload;
                        }
                        if fallback_iterator.get().is_und() {
                            return Err(icu_provider::DataErrorKind::IdentifierNotFound.with_req(<icu::experimental::dimension::provider::percent::PercentEssentialsV1Marker as icu_provider::DataMarker>::INFO, req));
                        }
                        fallback_iterator.step();
                    }
                };
                Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(payload), metadata })
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_percent_essentials_v1_marker!($provider);
        #[clippy::msrv = "1.70"]
        impl icu_provider::IterableDataProvider<icu::experimental::dimension::provider::percent::PercentEssentialsV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BTreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok(icu_provider_baked::DataStore::iter(&Self::DATA_PERCENT_ESSENTIALS_V1_MARKER).collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_percent_essentials_v1_marker as impl_percent_essentials_v1_marker;
